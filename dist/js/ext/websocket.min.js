const wsExtension=(n,r)=>{const o=r["extension"];if(o["name"]!=="websocket"){throw new Error('The extension name is not "websocket"!')}if(!o.hasOwnProperty("connect")){throw new Error(`The \"connect\" property is not defined for websocket extension!`)}if(o.connect===""){throw new Error('The "connect" property is empty in websocket extension!')}const e=new WebSocket(o.connect);const s=()=>{if(o.hasOwnProperty("callback")){if(o.callback===""){throw new Error(`The websocket extension \"callback\" property is empty!`)}app.callbacks[o.callback](e)}};e.addEventListener("open",async e=>{if(o.hasOwnProperty("element")){if(o.element===""){throw new Error(`The websocket extension \"element\" property is empty!`)}const t=document.querySelector(o.element);if(t!==null){if(o.hasOwnProperty("trigger")){if(o.trigger===""){throw new Error(`The websocket extension \"trigger\" property is empty!`)}}else{o.trigger="click"}t.addEventListener(o.trigger,s)}}else{s()}});e.addEventListener("message",async e=>{n.result=e.data;delete e.data;const t=await app.processReqData(n,r);await app.sequenceTasks(t,n,r)})};