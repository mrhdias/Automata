"use strict";export default class Automata{constructor(t={attribute:"data-tasks",json_file:"tasks.json",start_element:"body"}){this.triggers=new Set(["click","init","mouseenter","mouseover","mouseup","mouseleave","scroll","scrollend","submit"]);this.methods=new Set(["get","post","put","patch","delete"]);this.dataAttribute=t["attribute"];this.jsonFile=t["json_file"];this.startElement=t["start_element"];this.tasks={}}fetchOptions(t,e){let r={method:t.method,cache:"no-cache"};if(t.method==="put"){r["headers"]={"Content-Type":"application/json"};r["body"]=JSON.stringify(e);return r}return r}async makeRequest(e,r={}){console.log("Body Data:",r,e.action);try{const s=await fetch(e.action,this.fetchOptions(e,r));if(!s.ok){throw new Error(`HTTP error! status: ${s.status} ${s.statusText}`)}let t={transformation:{},data:undefined};if(s.headers.has("Automata-Transformation")){console.log("Automata-Transformation:",s.headers.get("Automata-Transformation"));const a=s.headers.get("Automata-Transformation");if(a!==""){t.transformation=this.attrsStr2Obj(a)}}if(s.headers.has("Content-Type")){if(s.headers.get("Content-Type").includes("application/json")){const n=await s.json();t.data=n;return t}}const o=await s.text();t.data=o;return t}catch(t){console.error(t)}}attrsStr2Obj(t){if(t===""){return{}}const e=t.replace(/[\r\n] */gm,"").replace(/\;$/,"").split(/\; */);let r={};for(const s of e){const o=s.split(/\: */);if(o.length!=2){throw new Error(`Wrong data atribute: ${s}`)}r[o[0]]=o[1]}return r}async getResource(t){if(t.length<=".json".length||!t.endsWith(".json")){throw new Error(`The ${t} file is not valid for this operation!`)}const e=await fetch(t,{cache:"no-cache"});if(!e.ok){throw new Error(`When fetching the file ${t} happen an HTTP error! status: ${e.status} ${e.statusText}`)}return await e.json()}swapContent(t,e,r="inner"){if(r==="inner"){e.replaceChildren(...t.childNodes);return}if(r==="outer"){e.replaceWith(...t.childNodes);return}if(r==="before"){e.before(...t.childNodes)}if(r==="after"){e.after(...t.childNodes);return}if(r==="prepend"){e.prepend(...t.childNodes);return}if(r==="append"){e.append(...t.childNodes);return}if(r==="delete"){e.remove();return}if(r==="none"){return}throw new Error(`swap "${r}" attribute not supported`)}addKeyValue(t,e,r,s=false){if(t.hasOwnProperty(e)){if(Array.isArray(t[e])){t[e].push(r)}else{const o=t[e];t[e]=[];t[e].push(o,r)}}else{if(s){t[e]=[];t[e].push(r)}else{t[e]=r}}}collectBodyData(t,e,r=""){if(t.hasChildNodes()){if(t.hasAttribute("name")){if(t.hasAttribute("name")&&!t.hasAttribute("value")){e[t.name]=[];r=t.name}}for(const s of t.childNodes){if(s.nodeType!==Node.TEXT_NODE){this.collectBodyData(s,e,r)}}}if(t.nodeType!==Node.TEXT_NODE){if(t.hasAttribute("value")){if(t.hasAttribute("name")){if(t.hasAttribute("type")&&t.type.toLowerCase()==="radio"){if(t.checked){this.addKeyValue(e,t.name,t.value)}}else if(t.type.toLowerCase()==="checkbox"){if(t.checked){this.addKeyValue(e,t.name,t.value,true)}}else{this.addKeyValue(e,t.name,t.value)}}else{if(t.nodeName==="OPTION"&&t.selected){const o=t.closest("select");if(o.hasChildNodes()){this.addKeyValue(e,o.name,t.value,true)}}}}}}findTasksRecursively(t){for(const e of t.childNodes){if(e.nodeType===Node.TEXT_NODE||e.nodeType===Node.COMMENT_NODE){continue}if(e.hasChildNodes()){this.findTasksRecursively(e)}if(e.hasAttribute(this.dataAttribute)&&e.getAttribute(this.dataAttribute)!==""){this.setTask(e)}}}minifyJavaScript(t){return t.replace(/\/\/.*|\/\*[\s\S]*?\*\//g,"").replace(/\s+/g," ").trim()}reScript(t){for(const e of t.childNodes){if(e.hasChildNodes()){this.reScript(e)}if(e.nodeName==="SCRIPT"){const r=document.createElement("script");r.type="text/javascript";r.textContent=this.minifyJavaScript(e.textContent);e.replaceWith(r)}}}buildFragment(data,source){const helper=document.createElement("div");helper.innerHTML=eval("`"+source+"`");this.reScript(helper);return helper}async fetchTemplate(t){try{const e=await fetch("./templates/".concat(t,".html"));if(!e.ok){throw new Error(`HTTP error! status: ${e.status} ${e.statusText}`)}return e.text()}catch(t){console.error(t)}return undefined}setTransformation(t,e){if(e.hasOwnProperty("target")){t["target"]=e["target"]}else if(!t.hasOwnProperty("target")){t["target"]="this"}if(e.hasOwnProperty("template")){t["template"]=e["template"]}if(e.hasOwnProperty("swap")){t["swap"]=e["swap"]}else if(!t.hasOwnProperty("swap")){t["swap"]="inner"}if(e.hasOwnProperty("remove")){t["remove"]=e["remove"]}}async templateManager(t,r,e){if(r.template.length<3){throw new Error(`Short template name "${r.template}"`)}const s=await async function(t){switch(Array.from(r.template)[0]){case"@":return await t.fetchTemplate(r.template.substring(1));case"#":const e=document.getElementById(r.template.substring(1));if(e===null){throw new Error(`Template "${r.template}" not exist!`)}if(e.content.hasChildNodes()&&e.content.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&e.content.children[0].nodeName==="TEXTAREA"&&e.content.children[0].hasAttribute("data-codeblock")){return e.content.children[0].value}throw new Error(`Invalid "${r.template}" embedded template`);default:throw new Error(`Invalid "${r.template}" fetched template`)}}(this);const o=this.buildFragment(e,s);if(o===null){throw new Error(`An error happened while processing the "${r.template}" template`)}if(r.hasOwnProperty("remove")&&r.remove!==""){const a=document.querySelectorAll(r.remove);for(const n of a){n.remove()}}this.findTasksRecursively(o);this.swapContent(o,t,r.swap)}async processEvent(t,e){if(!(e.hasOwnProperty("action")&&e.hasOwnProperty("method"))){const o=e.target==="this"?t:document.querySelector(e.target);if(o===null){throw new Error(`Template "${e.target}" not exist!`)}if(e.hasOwnProperty("template")){const a=await async function(t){if(e.hasOwnProperty("file-path")){return await t.getResource(e["file-path"])}return{}}(this);this.templateManager(o,e,a)}return}let r={};if(e.trigger==="submit"){const n=t.closest("form");if(n!==null&&n.hasChildNodes()){const i=n.querySelectorAll("input[name],select[name]");for(const c of i){this.collectBodyData(c,r)}}}else if(e.hasOwnProperty("collect-data")){const l=document.querySelectorAll(e["collect-data"]);for(const h of l){this.collectBodyData(h,r)}if(["post","put"].includes(e["method"])&&Object.keys(r).length===0){return}if(t.name!==""){r[t.name]=t.value}}if(e.hasOwnProperty("method")){e.method=e.method.toLowerCase();if(!this.methods.has(e.method)){throw new Error(`Unknown HTTP method: ${e.method}`)}}else{e["method"]="get"}const s=await this.makeRequest(e,r);if(s===undefined){return}this.setTransformation(e,s.transformation);const o=e.target==="this"?t:document.querySelector(e.target);if(o===null){throw new Error(`Template "${e.target}" not exist!`)}if(typeof s.data==="object"){if(e.hasOwnProperty("template")){this.templateManager(o,e,s.data)}}else if(typeof s.data==="string"&&s.data!==""){const d=function(t){const e=document.createElement("div");e.innerHTML=s.data;t.reScript(e);return e}(this);if(e.hasOwnProperty("remove")&&e.remove!==""){const f=document.querySelectorAll(e.remove);for(const u of f){u.remove()}}this.findTasksRecursively(d);this.swapContent(d,o,e.swap)}else{throw new Error("There is no data or text for the transformation")}}async setTask(t){const e=t.dataset.tasks.split(/ +/);for(const r of e){if(!this.tasks.hasOwnProperty(r)){throw new Error(`The task "${r}" not exist in tasks file!`)}console.log("Task:",r);const s=this.tasks[r];for(const a of["action","method","trigger"]){const n="attribute-".concat(a);if(s.hasOwnProperty(n)&&t.hasAttribute(s[n])&&t.getAttribute(s[n])!==""){s[a]=t.getAttribute(s[n])}}if(!(s.hasOwnProperty("trigger")&&this.triggers.has(s.trigger))&&(t.nodeName==="BUTTON"||t.nodeName==="INPUT"&&t.type==="button")){s.trigger="click"}if(s.trigger==="init"){this.processEvent(t,s);continue}const o=function(){if(s.trigger==="scroll"||s.trigger==="scrollend"){return document}return t}();o.addEventListener(s.trigger,t=>{t.preventDefault();this.processEvent(t.target,s)})}}search4Tasks(t){const e=t.querySelectorAll("["+this.dataAttribute+"]");if(e.length>0){for(const r of e){if(r.dataset.tasks!==""){this.setTask(r)}}}}init(){const e=document.getElementsByTagName(this.startElement);const t={childList:true,subtree:true};const r=(t,s)=>{t.forEach(t=>{if(t.type==="childList"){for(const e of t.addedNodes){console.log("Added Nodes...")}for(const r of t.removedNodes){console.log("Removed Nodes...")}if(t.target.childNodes.length===0){s.disconnect()}}})};const s=new MutationObserver(r);s.observe(e[0],t);this.getResource(this.jsonFile).then(t=>{this.tasks=t;this.search4Tasks(e[0])})}}export{Automata};